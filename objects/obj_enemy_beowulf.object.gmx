<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_beowulf</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_character</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables
event_inherited();
sprite_idle = spr_beowulf;
sprite_attack = spr_beowulf_swipe;
sprite_walk = spr_beowulf_walk;
sprite_index = sprite_idle;

team = teams.bad;

ainput = 0;
state = ai_state.idle;
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack
ainput = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Randomly Change AI

// AI percents
cakechance = 5; // 0 -&gt; 4 = 5 / 10
playerchance = 9 // 5 -&gt; 8 = 4 / 10
idlechance = 10; // 9 -&gt; 9 = 1 / 10

aichoice = random(10);

if (aichoice &lt; cakechance) {
    state = ai_state.attack_cake;
    alarm[0] = (random(5) + 5) * room_speed;
}
else if (aichoice &lt; playerchance) {
    state = ai_state.attack_player;
    alarm[0] = (random(5) + 5) * room_speed;
}
else if (aichoice &lt; idlechance) {
    state = ai_state.idle;
    alarm[0] = (random(1) + 1) * room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// AI Input
event_inherited();

attack_distance = 84;

// Get directions (ai input)
switch (state) {

    case ai_state.attack_cake: {
        // movement
        distance_cake = cake.x - x;
        dir = sign(distance_cake);
        
        // attack
        if (abs(distance_cake) &lt; attack_distance) {
            if (alarm[1] != 0) alarm[1] = random(1) * room_speed;
        }
    }
    break;
    
    case ai_state.attack_player: {
        // movement
        distance_player1 = player1.x - x;
        distance_player2 = player2.x - x;
        if (abs(distance_player1) &lt; abs(distance_player2)) {
            dir = sign(distance_player1);
        }
        else {
            dir = sign(distance_player2);
        }
        
        // attack
        if (abs(distance_player1) &lt; attack_distance || abs(distance_player2) &lt; attack_distance) {
            if (alarm[1] != 0) alarm[1] = random(1) * room_speed;
        }
    }
    break;
    
    case ai_state.idle: {
        dir = 0;
    }
    break;
}

// Interpret ai input
hinput = dir;
vinput = 0; // add jump reactions later (if necessary)

// Physics
scr_character_physics(id, hinput, vinput);

// Attack
scr_character_attack(id, ainput);
ainput = 0;

// Animation
scr_character_walk(id, hinput);
scr_character_sprite_direction(id, hinput);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index == sprite_attack) {
    sprite_index = sprite_idle;
    attacked = false;
    attacking = false;
}

if (sprite_index == sprite_walk) {
    sprite_index = sprite_idle;
    walking = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
