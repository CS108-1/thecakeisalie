<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables
chars[0] = spr_weiss_swordfish;
chars[1] = spr_yang_turkey;
chars[2] = spr_blake_bread;

p1selected = false;
p2selected = false;

p1char = 0;
p2char = 0;

x_offset = 128;
y_offset = -64;

x = room_width / 2;
y = room_height / 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keyboard Input
var p1move = 0;
p1move -= max(keyboard_check_pressed(vk_left), keyboard_check_pressed(vk_up), 0);
p1move += max(keyboard_check_pressed(vk_right), keyboard_check_pressed(vk_down), 0);

var p2move = 0;
p2move -= max(keyboard_check_pressed(ord("A")), keyboard_check_pressed(ord("W")), 0);
p2move += max(keyboard_check_pressed(ord("D")), keyboard_check_pressed(ord("S")), 0);

if (p1move != 0 &amp;&amp; !p1selected) {
    p1char += p1move;
    if (p1char &lt; 0) p1char = array_length_1d(chars) - 1;
    if (p1char &gt; array_length_1d(chars) - 1) p1char = 0;
}

if (p2move != 0 &amp;&amp; !p2selected) {
    p2char += p2move;
    if (p2char &lt; 0) p2char = array_length_1d(chars) - 1;
    if (p2char &gt; array_length_1d(chars) - 1) p2char = 0;
}

var p1enter = max(keyboard_check_released(vk_enter), 0);
var p2enter = max(keyboard_check_released(vk_shift), keyboard_check_released(vk_space), 0);

if (p1enter == 1) p1selected = true;
if (p2enter == 1) p2selected = true;

if (p1selected &amp;&amp; p2selected) {
    scr_set_characters();
    room_goto(rm_table);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Menu
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_color(c_white);

p1sprite = chars[p1char];
p2sprite = chars[p2char];

draw_set_alpha(.75);
draw_rectangle_color(x - sprite_get_width(p1sprite) + x_offset, y - sprite_get_height(p1sprite) + y_offset, x + sprite_get_width(p1sprite) + x_offset, y + sprite_get_height(p1sprite) + y_offset, c_black, c_black, c_black, c_black, false);
draw_rectangle_color(x - sprite_get_width(p2sprite) - x_offset, y - sprite_get_height(p2sprite) + y_offset, x + sprite_get_width(p2sprite) - x_offset, y + sprite_get_height(p2sprite) + y_offset, c_black, c_black, c_black, c_black, false);

draw_set_alpha(1);
draw_sprite_ext(p1sprite, 0, x + 128, y + y_offset, -2, 2, 0, c_white, 1);
draw_sprite_ext(p2sprite, 0, x - 128, y + y_offset, 2, 2, 0, c_white, 1);

draw_set_font(fnt_description);
if (!p1selected) draw_text(x + x_offset, y + 20, "Enter to select");
else draw_text(x + x_offset, y + 20, "Selected!");

if (!p2selected) draw_text(x - x_offset, y + 20, "Shift/Space to select");
else draw_text(x - x_offset, y + 20, "Selected!");

draw_set_font(fnt_menu);
draw_text(x, y + (y_offset * 3), "Character Select");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
